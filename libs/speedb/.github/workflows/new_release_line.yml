name: New Release Line

on:
  workflow_dispatch:
    inputs:
      new_branch_major:
        description: "Next release Major version (LEAVE EMPTY FOR AUTO-INCREMENT)"
        required: false
      new_branch_minor:
        description: "Next release Minor version (LEAVE EMPTY FOR AUTO-INCREMENT)"
        required: false
    branches:
      - main
      - 'release/*'

permissions:
  contents: read

jobs:
  tag_version:
    runs-on: [self-hosted, ubuntu, asrunner]
    container:
      image: alpine:3.14

    env:
      VERSION_FILE: speedb/version.h

    steps:
      - name: pre
        run: |
          echo "nameserver 8.8.8.8" > /etc/resolv.conf
          apk add git openssh-client

      - name: Verify chosen version
        run: |
          if ! echo "${{ inputs.new_branch_major }}" | grep -q "^[0-9]*$"; then
            echo >&2 "error: major version must be a positive number" && false
          fi
          if ! echo "${{ inputs.new_branch_minor }}" | grep -q "^[0-9]*$"; then
            echo >&2 "error: minor version must be a positive number" && false
          fi

          if [ "${{ inputs.new_branch_major }}${{ inputs.new_branch_minor }}" != "" ] && [ "$GITHUB_REF" != "refs/heads/main" ]; then
            echo >&2 "error: cannot cut a major or a minor release from a branch that isn't main" && false
          elif [ "$GITHUB_REF" != "refs/heads/main" ] && ! echo "$GITHUB_REF" | grep -q "^refs/heads/release/"; then
            echo "error: cannot cut a patch release from a non-release branch" && false
          fi
          
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.RELEASE_SSH_KEY }}

      - name: Calculate new version
        run: |
          major=$(grep '_MAJOR\s\+[0-9]\+' "$VERSION_FILE" | sed 's/[^0-9]\+//')
          minor=$(grep '_MINOR\s\+[0-9]\+' "$VERSION_FILE" | sed 's/[^0-9]\+//')

          if [ -n "${{ inputs.new_branch_major }}" ] && [ "${{ inputs.new_branch_major }}" -lt "$major" ]; then
            echo >&2 "error: the chosen major version is lower than current one" && false
          elif [ -n "${{ inputs.new_branch_major }}" ] && [ "${{ inputs.new_branch_major }}" -gt "$major" ]; then
            major=${{ inputs.new_branch_major }}
            if [ -n "${{ inputs.new_branch_minor }}" ] && [ "${{ inputs.new_branch_minor }}" -ne 0 ]; then
              echo >&2 "error: cannot bump minor version when bumping major version" && false
            fi
            minor=0
            patch=0
          elif [ -n "${{ inputs.new_branch_minor }}" ] && [ "${{ inputs.new_branch_minor }}" -lt "$minor" ]; then
            echo >&2 "error: the chosen minor version is lower than current one" && false
          elif [ -n "${{ inputs.new_branch_minor }}" ] && [ "${{ inputs.new_branch_minor }}" -gt "$minor" ]; then
            minor=${{ inputs.new_branch_minor }}
            patch=0
          elif [ "$GITHUB_REF" = "refs/heads/main" ]; then
            minor=$(( $minor + 1 ))
            patch=0
          else
            patch=$(( $(grep '_PATCH\s\+[0-9]\+' "$VERSION_FILE" | sed 's/[^0-9]\+//') + 1 ))
          fi

          echo "major=$major" >> $GITHUB_ENV
          echo "minor=$minor" >> $GITHUB_ENV
          echo "patch=$patch" >> $GITHUB_ENV

      - name: Update version.h
        run: |
          git config user.name "GitHub Runner Bot"
          git config user.email "<>"

          sed -i -e "s/\(#define [^\s]\+_MAJOR\s\+\)[0-9]\+/\1${major}/" "$VERSION_FILE"
          sed -i -e "s/\(#define [^\s]\+_MINOR\s\+\)[0-9]\+/\1${minor}/" "$VERSION_FILE"
          sed -i -e "s/\(#define [^\s]\+_PATCH\s\+\)[0-9]\+/\1${patch}/" "$VERSION_FILE"

          git add "$VERSION_FILE"
          git commit -m "release: publish version ${major}.${minor}.${patch}"
          git push origin ${GITHUB_REF#refs/heads/}

      - name: Tag and release
        run: |
          # Create a branch if it's a major or a minor release
          if [ "$patch" -eq 0 ]; then
            git checkout -b "release/${major}.${minor}"
            git push -u origin "release/${major}.${minor}"
          fi

          # Create a tag for the release
          git tag "speedb/v${major}.${minor}.${patch}"
          git push origin "speedb/v${major}.${minor}.${patch}"
