name: Create release artifacts

on:
  push:
    tags:
      - 'speedb/v*'

permissions:
  contents: write # Needed for release assets upload
  id-token: write # Needed for AWS credentials setting

jobs:
  build:
    runs-on: [self-hosted, ubuntu, asrunner]

    container:
      image: centos:7.9.2009

    steps:
      - name: pre
        run: |
          yum install -y centos-release-scl epel-release
          yum install -y make devtoolset-11-gcc-c++ \
            coreutils wget unzip which git python3 openssl openssl-devel \
            libzstd-devel lz4-devel snappy-devel zlib-devel readline-devel \
            java-1.8.0-openjdk-devel
          echo "PATH=/opt/rh/devtoolset-11/root/usr/bin:${PATH}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${GITHUB_REF_NAME#speedb/v}" >> $GITHUB_ENV

      - name: Install CMake
        run: |
          CMAKE_RELEASE=3.20.1
          wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_RELEASE}/cmake-${CMAKE_RELEASE}.tar.gz
          tar xf cmake-${CMAKE_RELEASE}.tar.gz
          cd cmake-${CMAKE_RELEASE}
          ./bootstrap
          make -j$(nproc) && make install
          cd .. && rm -rf cmake-${CMAKE_RELEASE}*

      - name: Install awscli
        run: |
          wget "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -O "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          rm -rf aws awscliv2.zip

      - uses: actions/checkout@v3

      - run: mkdir "$GITHUB_WORKSPACE/out"

      - name: Build and package release libraries
        run: |
          rm -rf build && mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DSPDB_RELEASE_BUILD=1 -DPORTABLE=1 -DWITH_GFLAGS=0 -DWITH_SNAPPY=1 -DWITH_LZ4=1 -DWITH_ZLIB=1 -DWITH_ZSTD=1
          mkdir -p "$GITHUB_WORKSPACE/out/root"
          DESTDIR="$GITHUB_WORKSPACE/out/root" make -j$(nproc) install
          ( cd "$GITHUB_WORKSPACE/out/root" && tar czf ../speedb-${RELEASE_VERSION}.tar.gz . )
          rm -rf "$GITHUB_WORKSPACE/out/root"
          cd .. && rm -rf build

      - name: Build release Jar
        run: |
          make clean
          SPDB_RELEASE_BUILD=1 LIB_MODE=static DEBUG_LEVEL=0 PORTABLE=1 JAVA_HOME=/usr/lib/jvm/java-openjdk make -j$(nproc) rocksdbjavastatic
          cp "java/target/speedbjni-${RELEASE_VERSION}-linux64.jar" "$GITHUB_WORKSPACE/out"

      - name: Build db_bench
        run: |
          yum install -y gflags-devel
          rm -rf build && mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DSPDB_RELEASE_BUILD=1 -DPORTABLE=1 -DWITH_GFLAGS=1 \
            -DWITH_SNAPPY=1 -DWITH_LZ4=1 -DWITH_ZLIB=1 -DWITH_ZSTD=1 \
            -DWITH_BENCHMARK_TOOLS=1 -DROCKSDB_BUILD_SHARED=1
          make -j$(nproc) db_bench
          cp ../docs/db_bench_README.txt .
          tar czf "$GITHUB_WORKSPACE/out/db_bench-speedb-${RELEASE_VERSION}.tar.gz" db_bench db_bench_README.txt
          cd .. && rm -rf build

      - name: Generate checksums
        run: |
          for f in $GITHUB_WORKSPACE/out/*; do
            sha256sum "$f" > "$f.sha256"
          done

      - name: Get release date
        run: |
          echo "RELEASE_DATE=$(git for-each-ref "--format=%(creatordate:short)" "refs/tags/${GITHUB_REF_NAME}")" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: false
          name: Speedb ${{ env.RELEASE_VERSION }} (${{ env.RELEASE_DATE }})
          files: |
            out/db_bench-speedb-${{ env.RELEASE_VERSION }}.tar.gz
            out/db_bench-speedb-${{ env.RELEASE_VERSION }}.tar.gz.sha256
            out/speedb-${{ env.RELEASE_VERSION }}.tar.gz
            out/speedb-${{ env.RELEASE_VERSION }}.tar.gz.sha256
            out/speedbjni-${{ env.RELEASE_VERSION }}-linux64.jar
            out/speedbjni-${{ env.RELEASE_VERSION }}-linux64.jar.sha256

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Upload artifacts to S3
        run: |
          aws s3 cp "$GITHUB_WORKSPACE/out" "s3://spdb-github-artifacts/release-${RELEASE_VERSION}" --recursive
          rm -rf "$GITHUB_WORKSPACE/out"
